Before deciding to ignore the return values:

BUG2_CONTROLLER:

import sys
import rclpy
from rclpy.node import Node

from std_srvs.srv import SetBool
from bug2_interfaces.srv import GoToPoint

class Bug2(Node):
    def __init__(self):
        super().__init__("Bug2_Controller")
        self.get_logger().info("Bug2_Controller Node created")

        self.wf_client = self.create_client(SetBool, 'wall_follower')
        
        self.gtp_client = self.create_client(GoToPoint, 'go_to_point')
        

        
        timer_period = 0.1
        self.timer = self.create_timer(timer_period, self.timer_callback)

        

        #Wall_follower variables:
        self.wf_req = SetBool.Request()
        self.wf_res = SetBool.Response()
        self.wf_move = False
        self.wf_pos = [0,0]

        #Go to point variables:
        self.req = GoToPoint.Request()
        self.res = GoToPoint.Response()
        self.res.success = False

        self.gtp_move = True
        self.gtp_x = 3.0
        self.gtp_y = 0.0
        self.gtp_wall_found = True #False

        #Variables related to calculating the closest pos
        self.closest_pos = [0,0]


    def timer_callback(self):
        if not self.gtp_wall_found:
            response = self.send_request_go_to_point(self.gtp_move, self.gtp_x, self.gtp_y)
            if not response:
                self.gtp_wall_found = True

        elif self.gtp_wall_found:
            self.wf_move = True
            service = self.send_request_wall_follower(self.wf_move)
            


    def send_request_wall_follower(self, move):
        
            print('Calling wall_follower async')
            self.wf_req.data = move

            self.future = self.wf_client.call_async(self.wf_req)

            rclpy.spin_until_future_complete(self, self.future)
            
            result = self.future.result()
            print(result.success)
            return result
        

    def send_request_go_to_point(self, move, x, y):
        print('Calling go to point async')
        self.req.move_switch = move
        self.req.target_position.x = x
        self.req.target_position.y = y

        self.future = self.gtp_client.call_async(self.req)

        rclpy.spin_until_future_complete(self, self.future)

        result = self.future.result()
        print(result.success)
        return result.success


def main(args=None):
    rclpy.init(args=args)

    bug2_controller = Bug2()

    rclpy.spin(bug2_controller)

    bug2_controller.destroy_node()

    rclpy.shutdown()


if __name__ == '__main__':
    main()


WALL_FOLLOWER:
import rclpy
from rclpy.node import Node

from tf_transformations import euler_from_quaternion
from nav_msgs.msg import Odometry

from geometry_msgs.msg import Twist
from sensor_msgs.msg import LaserScan
from std_srvs.srv import SetBool

class WallFollower(Node):
    def __init__(self):
        super().__init__("Wall_Follower")
        self.get_logger().info("Wall_follower Node created")
        self.sub = self.create_subscription(LaserScan, '/scan', self.clbk_laser, 10)
        self.odom_sub = self.create_subscription(Odometry, '/odom', self.callback_odom, 10)
        self.pub = self.create_publisher(Twist, '/cmd_vel', 10)

        self.srv = self.create_service(SetBool, 'wall_follower', self.wall_follower_service)

        #Default values for the lidar variables as a placeholder until the actual sensor values are recieved through from the ros topic
        self.lidar_front_direct = 100
        self.lidar_left_front = 100
        self.lidar_left_direct = 100
        self.lidar_right_direct = 100
        self.lidar_right_front = 100
        
        #Odom
        self.position = 0
        
        #Creates a timer definition -> during rclpy.spin() the function self.timer_callback() will be executed every 0.1 seconds
        timer_period = 0.1  # seconds
        self.timer = self.create_timer(timer_period, self.timer_callback) 


        #Boolean to trigger if a wall is found
        self.is_wall_found = False

        #Boolean to trigger if there is a corner
        self.is_corner = False


        #String representation of which mode is activated
        """
        go          ==> drive()
        follow wall ==> follow_wall()
        full stop   ==> full_stop()
        """ 
        self.drive_mode = "full_stop"

        #global distance checks
        self.distance_wall_ahead = 0.6

        #global velocity speeds
        self.velocity_fast = 0.5
        self.velocity_normal = 0.3
        self.velocity_slow = 0.15
        self.velocity_very_slow = 0.05
        
        #global rotation speeds
        self.rotation_very_fast = 0.6
        self.rotation_fast = 0.3
        self.rotation_normal = 0.2
        self.rotation_slow = 0.1
        self.rotation_very_slow = 0.05
        
    def wall_follower_service(self, request, response):
        
        if request.data:
            self.drive_mode = "go"
            response.success = True
        else:
            self.drive_mode = "full stop"
            response.success = True
        
        print('PRINTING...'+str(self.position.x)+','+str(self.position.y))
        response.message = 'RESPONSE MESSAGE...'
        
        return response


    #Callback function for the Turtlebots Lidar topic /scan
    def clbk_laser(self, msg):
        decimal = 2
        self.lidar_front_direct = round(msg.ranges[0], decimal)

        self.lidar_left_front = round(msg.ranges[45], decimal)
        self.lidar_left_direct = round(msg.ranges[90], decimal)

        self.lidar_right_direct = round(msg.ranges[270], decimal)
        self.lidar_right_front = round(msg.ranges[315], decimal)
        

    def callback_odom(self, msg):
        self.position = msg.pose.pose.position

        quaternion = (
            msg.pose.pose.orientation.x,
            msg.pose.pose.orientation.y,
            msg.pose.pose.orientation.z,
            msg.pose.pose.orientation.w
        )
        euler = euler_from_quaternion(quaternion)
        self.yaw = euler[2]


    def timer_callback(self):

        if not self.is_wall_found:
            wall_check(self)

        #Perform a given task based on which drive mode (command) is current
        mode = self.drive_mode

        if mode == "go":
            drive(self)

        elif mode == "follow wall":
            follow_wall(self)

        else:
            full_stop(self)
        

def wall_check(self):
    #Check if there is a wall ahead

    if self.lidar_front_direct <= self.distance_wall_ahead:
        self.is_wall_found = True
        full_stop(self)
        self.drive_mode = "follow wall"

def full_stop(self):
    msg = Twist()
    msg.linear.x = 0.0
    msg.angular.z = 0.0
    self.pub.publish(msg)

def drive(self):
    msg = Twist()
    msg.linear.x = self.velocity_normal
    msg.angular.z = 0.0
    self.pub.publish(msg)

def follow_wall(self):

    msg = Twist()
    msg.linear.x = 0.0

    #from -1 to 1 (-1 rotates towards right)
    msg.angular.z = 0.0

    distance  = self.distance_wall_ahead

    stop = False

    if self.lidar_front_direct < distance:
        print("1")
        msg.linear.x = 0.0
        msg.angular.z = -self.rotation_fast

    elif (self.lidar_front_direct > self.lidar_left_front) and (self.lidar_left_direct > self.lidar_left_front) and self.lidar_left_front < distance:
        print("2")
        msg.linear.x = 0.0
        msg.angular.z = -self.rotation_fast

    elif (self.lidar_left_direct > self.lidar_front_direct) and (self.lidar_left_direct < distance):
        print("3")
        msg.linear.x = 0.0
        msg.angular.z = -self.rotation_fast
    
    elif self.lidar_left_front < distance*0.7:
        print("4")
        msg.linear.x = self.rotation_slow
        msg.angular.z = -self.rotation_fast
    
    elif (self.lidar_left_direct > 0.75 * distance) and (self.lidar_left_front > distance):
        print("5")
        msg.linear.x = self.velocity_normal
        msg.angular.z = self.rotation_fast
        self.is_corner = True
    
    elif (self.lidar_left_direct > distance) or (self.lidar_left_front > distance):
        print("6 correcting")
        msg.linear.x = self.velocity_slow
        msg.angular.z = self.rotation_fast

    else:
        print("DEFAULT")
        msg.linear.x = self.velocity_normal
        msg.angular.z = self.rotation_very_slow
    

    #If its rounding a corner
    if self.is_corner:
        if (self.lidar_left_direct > self.lidar_left_front) and (self.lidar_front_direct > self.lidar_left_front):
            print(" 2 -> 1 Breaking out of sharp cornering")
            self.is_corner = False
        else:
            print(" 2 -> 2 Sharp cornering")
            msg.linear.x = self.velocity_slow
            msg.angular.z = self.rotation_very_fast


    #GEN 1
        """
        if self.lidar_front_direct < distance:
            msg.linear.x = 0.0
            msg.angular.z = -(self.rotation_fast)
            
        elif self.lidar_left_direct < distance * 0.5:
            msg.linear.x = self.velocity_normal
            msg.angular.z = -(self.rotation_fast)

        elif self.lidar_left_front < distance*0.6:
            msg.linear.x = 0.0
            msg.angular.z = -(self.rotation_fast)

        elif (self.lidar_left_front > distance) and (self.lidar_left_direct > distance):
            msg.linear.x = self.velocity_slow
            msg.angular.z = self.rotation_fast
        elif (self.lidar_left_front > distance * 2) and (self.lidar_left_direct > distance * 2):
            msg.linear.x = self.velocity_very_slow
            msg.angular.z = self.rotation_normal

        elif (self.lidar_left_direct >= 0.5 * distance) and (self.lidar_left_direct <= distance):
            msg.linear.x = self.velocity_fast
            msg.angular.z = 0.0

        else:
            msg.linear.x = self.velocity_normal
            msg.angular.z = self.rotation_slow
"""

    self.pub.publish(msg)

def main(args=None):
    rclpy.init(args=args)

    controller = WallFollower()

    rclpy.spin(controller)

    controller.destroy_node()

    rclpy.shutdown()


if __name__ == '__main__':
    main()




/////////////////////////////////////////////////////////////////////////////////////

Before deciding to run everything from main:


import rclpy
from rclpy.node import Node

import math

from std_srvs.srv import SetBool
from bug2_interfaces.srv import GoToPoint

from tf_transformations import euler_from_quaternion
from nav_msgs.msg import Odometry

class Bug2(Node):
    def __init__(self):
        super().__init__("Bug2_Controller")
        self.get_logger().info("Bug2_Controller Node created")
        
        self.odom_sub = self.create_subscription(Odometry, '/odom', self.callback_odom, 10)
        
        self.wf_client = self.create_client(SetBool, 'wall_follower')
        
        self.gtp_client = self.create_client(GoToPoint, 'go_to_point')
        

        
        timer_period = 0.1
        self.timer = self.create_timer(timer_period, self.timer_callback)

        #Boolean
        self.initialise_variables = False
        self.is_on_line = False

        #Wall_follower variables:
        self.wf_req = SetBool.Request()
        self.wf_res = SetBool.Response()
        self.wf_move = False

        #Go to point variables:
        self.req = GoToPoint.Request()
        self.res = GoToPoint.Response()
        self.res.success = False
        self.gtp_move = True
        self.gtp_wall_found = False

        #Central initial values
        self.gtp_x = 3.0
        self.gtp_y = 0.0
        self.starting_x = 0
        self.starting_y = 0
        self.target_angle = 0

        #Variables related to calculating the closest pos
        self.closest_pos = [0, 0]
        self.position = 0
        self.current_angle = 0

    def send_request_go_to_point(self, move, x, y):
        print('Calling go to point async')
        self.req.move_switch = move
        self.req.target_position.x = x
        self.req.target_position.y = y

        self.future = self.gtp_client.call_async(self.req)

        rclpy.spin_until_future_complete(self, self.future)
        
        result = self.future.result()
        print(result.success)
        return result.success

    def send_request_wall_follower(self, move):
        
            print('Calling wall_follower async')
            self.wf_req.data = move

            self.future = self.wf_client.call_async(self.wf_req)

            self.wf_res.message = "Testing"

            result = self.future.result()
            if result:
                print(result.success)
            return result

    def timer_callback(self):

        if not self.initialise_variables:
            self.starting_x = self.position.x
            self.starting_y = self.position.y
            self.target_angle = self.calculate_degrees(self.starting_x, self.starting_y, self.gtp_x, self.gtp_y)
            self.closest_pos[0] = self.starting_x
            self.closest_pos[1] = self.starting_y
            self.initialise_variables = True
        

        print(f'{self.position.x}, {self.position.y}')

        if not self.gtp_wall_found:
            response = self.send_request_go_to_point(self.gtp_move, self.gtp_x, self.gtp_y)
            self.calculate_and_check()
            if not response:
                self.gtp_wall_found = True

        elif self.gtp_wall_found:
            self.wf_move = True
            self.send_request_wall_follower(self.wf_move)
            if self.calculate_and_check():
                self.gtp_wall_found = False
                self.wf_move = False
        else:
            print('FAILURE')
            
    def callback_odom(self, msg):
        self.position = msg.pose.pose.position

        quaternion = (
            msg.pose.pose.orientation.x,
            msg.pose.pose.orientation.y,
            msg.pose.pose.orientation.z,
            msg.pose.pose.orientation.w
        )
        euler = euler_from_quaternion(quaternion)
        self.yaw = euler[2]

    #Prints angle
    def calculate_degrees(self, pos_x, pos_y, goal_x, goal_y):

        delta_x = goal_x - pos_x
        delta_y = goal_y - pos_y

        angle_radians = math.atan2(delta_y, delta_x)

        angle_degrees = round(math.degrees(angle_radians),3)
        
        print(f'Current pos gives angle {angle_degrees}')

        return angle_degrees

    def angle_check(self, angle_self, angle_goal):
        difference = math.sqrt(math.pow(angle_self-angle_goal,2))

        if difference < 5:
            return True
        else:
            return False
        
    #Prints old closest point and new closest point  
    def closest_point(self, current_x, current_y, prev_x, prev_y, goal_x, goal_y):
        curr_diff_x = math.sqrt(math.pow(current_x-goal_x, 2))
        curr_diff_y = math.sqrt(math.pow(current_y-goal_y, 2))
        curr_diff = math.sqrt(math.pow(curr_diff_x+curr_diff_y, 2))

        prev_diff_x = math.sqrt(math.pow(prev_x-goal_x, 2))
        prev_diff_y = math.sqrt(math.pow(prev_y-goal_y, 2))
        prev_diff = math.sqrt(math.pow(prev_diff_x+prev_diff_y, 2))

        if curr_diff < prev_diff:
            print(f'old closest point {self.closest_pos[0]}, {self.closest_pos[1]}: New closest point {current_x}, {current_y}')
            self.closest_pos[0] = current_x
            self.closest_pos[1] = current_y
            
            return True
        else:
            return False
               
    def calculate_and_check(self):
        target_angle = self.target_angle
        current_angle = self.calculate_degrees(self.position.x, self.position.y, self.gtp_x, self.gtp_y)

        if self.angle_check(current_angle, target_angle):
            return True
        
        else:
            return False


def main(args=None):

    rclpy.init(args=args)

    bug2_controller = Bug2()

    rclpy.spin(bug2_controller)

    bug2_controller.destroy_node()

    rclpy.shutdown()


if __name__ == '__main__':
    main()
